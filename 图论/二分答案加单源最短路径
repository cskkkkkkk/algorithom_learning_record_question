#include<iostream>
#include<cstdio>
#include<algorithm>
#include<queue> 
#include<cstring>
#define il inline
#define rg register
#define N 10005
#define M 100005
#define MAXN 1000000005//最大收费（二分用 
using namespace std;
int f[N];//每个城市的收费额度
bool ed[N];//求最短路使用
int dis[N];//同上
int head[N];//前向星 
priority_queue <pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > que;
int n, m, b;
int t;
struct edge {
	int to, next, len;
}e[M];
il void add(int x, int y, int z) {
	e[++t].len = z;
	e[t].to = y;
	e[t].next = head[x];
	head[x] = t;
}
il int read() {
	int sum = 0; char a = getchar();
	while (a < '0' || a>'9')a = getchar();
	while (a >= '0' && a <= '9') {
		sum = (sum << 3) + (sum << 1) + a - '0';
		a = getchar();
	}
	return sum;
}
il bool work(int x) {//对于每个最大收费都确定是否可以到达 
	if (x < f[1])return 0;//起点都过不了走个p 
	for (int i = 1; i <= n; i++) {
		dis[i] = 1e9;//初始化为极大值 
	}
	memset(ed, 0, sizeof(ed));
	dis[1] = 0;
	que.push(make_pair(0, 1));
	int s1, s2;
	while (que.size()) {
		s1 = que.top().second; que.pop();
		if (ed[s1])continue;
		ed[s1] = 1;
		s2 = head[s1];
		while (s2) {//只有收费小于x的才能使用，大于x的一律视为没有 
			if (f[e[s2].to] <= x  && dis[s1] + e[s2].len < dis[e[s2].to])
			{
				dis[e[s2].to] = dis[s1] + e[s2].len;
				if(ed[e[s2].to] == 0)
					que.push(make_pair(dis[e[s2].to], e[s2].to));
			}//入堆准备下一轮操作 
			s2 = e[s2].next;//去下一条边 
		}
	}
	if (dis[n] < b) {
		return 1;
	}
	return 0;
}
int main() {
	n = read(); m = read(); b = read();
	for (rg int i = 1; i <= n; i++)
		f[i] = read();//储存费用
	int a1, a2, a3;
	for (rg int i = 1; i <= m; i++) {
		a1 = read(); a2 = read(); a3 = read();
		add(a1, a2, a3);
		add(a2, a1, a3);
	}
	if (work(MAXN) == 0) {
		cout << "AFK" << endl;
		return 0;//如果所有都开通任然不满足条件，剩下的肯定也不会满足 
	}
	int l = 1, r = MAXN, mid = (l + r) >> 1;//准备开始二分
	int c;
	while (l <= r) {
		c = work(mid);
		if (c) {//如果可以的话 
			r = mid - 1;
			mid = (l + r) >> 1;
		}
		else {
			l = mid + 1;
			mid = (l + r) >> 1;
		}
	}
	cout << l << endl;
}
