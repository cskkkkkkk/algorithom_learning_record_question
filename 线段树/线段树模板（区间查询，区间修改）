#include<iostream>
using namespace std;
#define ll long long
const int N = 1e5 + 10;
ll a[N];//记录数列的元素
ll tree[N << 2];//tree[i]为第i个节点的值，表示一个线段区间的值，如最值，区间和
ll tag[N << 2];//tag[i]为第i个节点的lazy-Tag,统一记录这个区间的修改
ll ls(ll p) { return p << 1; }//定位左儿子2*p
ll rs(ll p) { return p << 1 | 1; }//定位右儿子2*p+1

void push_up(ll p)
{
	tree[p] = tree[ls(p)] + tree[rs(p)];
}//求区间和向上传递

void build(ll p, ll pl, ll pr)//建树，p为节点编号，它指向区间[pl,pr]
{
	tag[p] = 0;
	if (pl == pr) { tree[p] = a[pl]; return; }//最底层的叶子，赋值即可
	ll mid = (pl + pr) >> 1;//分治
	build(ls(p), pl, mid);//建立左儿子
	build(rs(p), mid + 1, pr);//建立右儿子
	push_up(p);//从下往上传递区间值
}

void addtag(ll p, ll pl, ll pr, ll d)//p是当前节点编号，[pl,pr]是一个修改的区间，d是区间修改的值
{
	tag[p] += d;//打上tag标记
	tree[p] += d * (pr - pl + 1);//计算新的tree
}

void push_down(ll p, ll pl, ll pr)
{
	if (tag[p])
	{
		ll mid = (pl + pr) >> 1;
		addtag(ls(p), pl, mid, tag[p]);//把tag传给子树
		addtag(rs(p), mid + 1, pr, tag[p]);//把tag标记传给右子树
		tag[p] = 0;//p自己的tag给传走了归零
	}
}


void update(ll L, ll R, ll p, ll pl, ll pr, ll d)//区间修改
{
	if (L <= pl && pr <= R)//完全覆盖，直接返回这个节点，它的子树不用再深入了。
	{
		addtag(p, pl, pr, d);//给节点p打tag标记，下一次区间修改到p时会用到
		return;
	}
	push_down(p, pl, pr);//如果[L,R]不能覆盖那么就把tag传递给子树
	ll mid = (pl + pr) >> 1;
	if (L <= mid)update(L, R, ls(p), pl, mid, d);
	if (R > mid)update(L, R, rs(p), mid + 1, pr, d);
	push_up(p);
}

ll query(ll L, ll R, ll p, ll pl, ll pr)
{
	if (pl >= L && R >= pr) { return tree[p]; };//完全覆盖直接返回
	push_down(p, pl, pr);//不能覆盖递归子树
	ll res = 0;
	ll mid = (pl + pr) >> 1;
	if (L <= mid)res += query(L, R, ls(p), pl, mid);//左子节点有重叠
	if (R > mid)res += query(L, R, rs(p), mid + 1, pr);
	return res;
}

int main()
{
	ll n, m;
	cin >> n >> m;
	for (ll i = 1; i <= n; i++)
		cin >> a[i];
	build(1, 1, n);
	while (m--)
	{
		ll q, L, R, d;//q为1时进行区间修改，其它时进行区间查询
		cin >> q;
		if (q == 1)
		{
			cin >> L >> R >> d;
			update(L, R, 1, 1, n, d);//从根节点开始
		}
		else
		{
			cin >> L >> R;
			cout << query(L, R, 1, 1, n) << endl;//从头开始查询
		}
	}


}
